// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -package=mock -destination=mock/handler.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInvestmentScoreCalculator is a mock of InvestmentScoreCalculator interface.
type MockInvestmentScoreCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockInvestmentScoreCalculatorMockRecorder
	isgomock struct{}
}

// MockInvestmentScoreCalculatorMockRecorder is the mock recorder for MockInvestmentScoreCalculator.
type MockInvestmentScoreCalculatorMockRecorder struct {
	mock *MockInvestmentScoreCalculator
}

// NewMockInvestmentScoreCalculator creates a new mock instance.
func NewMockInvestmentScoreCalculator(ctrl *gomock.Controller) *MockInvestmentScoreCalculator {
	mock := &MockInvestmentScoreCalculator{ctrl: ctrl}
	mock.recorder = &MockInvestmentScoreCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvestmentScoreCalculator) EXPECT() *MockInvestmentScoreCalculatorMockRecorder {
	return m.recorder
}

// CalculateInvestmentScore mocks base method.
func (m *MockInvestmentScoreCalculator) CalculateInvestmentScore(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateInvestmentScore", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateInvestmentScore indicates an expected call of CalculateInvestmentScore.
func (mr *MockInvestmentScoreCalculatorMockRecorder) CalculateInvestmentScore(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateInvestmentScore", reflect.TypeOf((*MockInvestmentScoreCalculator)(nil).CalculateInvestmentScore), ctx)
}
